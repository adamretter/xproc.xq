* links
*** spec: http://www.w3.org/TR/xproc/
*** old xprocxq docs: http://exist.sourceforge.net/xproc/xproc.html
*** tests.xproc.org: http://tests.xproc.org/ 
* current
*** push all processor specific
***** xproc-impl - just namespaces
***** parse.xqy - just namespaces
***** const - some minor stuff
* tasks
*** library
*** declare-step
*** p:http
*** check p:with-option is encapsulating select string value correctly
*** check xpath-context,viewport-source, iteration-source
*** implement p:outputs
*** impl optional steps
    p:exec - anywhere in eXist a util:exec function (require java binding to be enabled )
    p:hash - problem with XSLTMATCHPATTERN with handling attributes
    p:www-form-urldecode - easy
    p:www-form-urlencode - easy

*** implement xproc xpath functions
    string/boolean p:system-property(string property)
    boolean p:step-available(string step-type)
    integer p:iteration-position()
    integer p:iteration-size()
    string p:base-uri()
    string p:base-uri(Node node)
    string p:resolve-uri(String relative)
    string p:resolve-uri(String relative, String base)

*** error assertions
* test tasks
*** be able to run a single test
*** testrunner for xprocxq specific tests
*** xml calabash ?
***** compare output
*** setup build system ?
* methodology
*** write test
*** test error codes
*** spec error codes
*** app error codes
* architecture
*** parser: create AST, name everything, make everything explicit and runnable
***** parse-time
******* sort pipeline
******* create ext:post
******* explicit port bindings
***** run-time: explicit bindings throws err:XS0044
******* resolve step bindings (p:empty,p:document, p:inline, p:data, lookup pipe
******* generate component throws xxq-error:XXQ0002
*** evaluator
***** step-fold is core processor
******* references to pipeline
******* references to AST
******* references to inscope namespaces
******* eval-step function
******* resolve external $primary input and bindings
******* resolve $output bindings
*** serializer
*** constants
*** namespace fixup
*** steps
***** std.xqm: required steps as defined by spec 
***** opt.xqm: optional steps as defined by spec
***** ext.xqm: extension steps specific to xprocxq
* notes
*** try to keep all processor specific functionality within util.xqm
*** build system should create vendor specific
***** marklogic
***** saxon
***** 28msec
***** basex
***** eXist
* scenarios
  - form handler
  - the same applies to all apps where a user needs to log in first
  - how about a simple wizard-style example, e.g. along the lines of the "number guessing" example in eXist. I think the page flow logic could all be done in xproc.

* 
  ;; don't delete these lines
  saved org fold info: (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 18 19 20 21 23 24 25 26 27 28 29 30 34 35 36 38 39 42)





